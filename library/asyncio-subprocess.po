# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-23 06:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/asyncio-subprocess.rst:7
msgid "Subprocesses"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:9
msgid ""
"This section describes high-level async/await asyncio APIs to create and "
"manage subprocesses."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:14
msgid ""
"Here's an example of how asyncio can run a shell command and obtain its "
"result::"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:35
msgid "will print::"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:41
msgid ""
"Because all asyncio subprocess functions are asynchronous and asyncio "
"provides many tools to work with such functions, it is easy to execute "
"and monitor multiple subprocesses in parallel.  It is indeed trivial to "
"modify the above example to run several commands simultaneously::"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:53
msgid "See also the `Examples`_ subsection."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:57
msgid "Creating Subprocesses"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:63
msgid "Create a subprocess."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:65
#: ../Doc/library/asyncio-subprocess.rst:80
msgid ""
"The *limit* argument sets the buffer limit for :class:`StreamReader` "
"wrappers for :attr:`Process.stdout` and :attr:`Process.stderr` (if "
":attr:`subprocess.PIPE` is passed to *stdout* and *stderr* arguments)."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:69
#: ../Doc/library/asyncio-subprocess.rst:84
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:71
msgid ""
"See the documentation of :meth:`loop.subprocess_exec` for other "
"parameters."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:78
msgid "Run the *cmd* shell command."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:86
msgid ""
"See the documentation of :meth:`loop.subprocess_shell` for other "
"parameters."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:91
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly"
" escape whitespace and special shell characters in strings that are going"
" to be used to construct shell commands."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:100
msgid ""
"The default asyncio event loop implementation on **Windows** does not "
"support subprocesses. Subprocesses are available for Windows if a "
":class:`ProactorEventLoop` is used. See :ref:`Subprocess Support on "
"Windows <asyncio-windows-subprocess>` for details."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:108
msgid ""
"asyncio also has the following *low-level* APIs to work with "
"subprocesses: :meth:`loop.subprocess_exec`, "
":meth:`loop.subprocess_shell`, :meth:`loop.connect_read_pipe`, "
":meth:`loop.connect_write_pipe`, as well as the :ref:`Subprocess "
"Transports <asyncio-subprocess-transports>` and :ref:`Subprocess "
"Protocols <asyncio-subprocess-protocols>`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:116
msgid "Constants"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:120
msgid "Can be passed to the *stdin*, *stdout* or *stderr* parameters."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:122
msgid ""
"If *PIPE* is passed to *stdin* argument, the :attr:`Process.stdin "
"<asyncio.subprocess.Process.stdin>` attribute will point to a "
":class:`StreamWriter` instance."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:126
msgid ""
"If *PIPE* is passed to *stdout* or *stderr* arguments, the "
":attr:`Process.stdout <asyncio.subprocess.Process.stdout>` and "
":attr:`Process.stderr <asyncio.subprocess.Process.stderr>` attributes "
"will point to :class:`StreamReader` instances."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:133
msgid ""
"Special value that can be used as the *stderr* argument and indicates "
"that standard error should be redirected into standard output."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:138
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* "
"argument to process creation functions.  It indicates that the special "
"file :data:`os.devnull` will be used for the corresponding subprocess "
"stream."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:144
msgid "Interacting with Subprocesses"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:146
msgid ""
"Both :func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions return instances of the *Process* class.  *Process* is a high-"
"level wrapper that allows communicating with subprocesses and watching "
"for their completion."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:153
msgid ""
"An object that wraps OS processes created by the "
":func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:157
msgid ""
"This class is designed to have a similar API to the "
":class:`subprocess.Popen` class, but there are some notable differences:"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:161
msgid ""
"unlike Popen, Process instances do not have an equivalent to the "
":meth:`~subprocess.Popen.poll` method;"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:164
msgid ""
"the :meth:`~asyncio.subprocess.Process.communicate` and "
":meth:`~asyncio.subprocess.Process.wait` methods don't have a *timeout* "
"parameter: use the :func:`wait_for` function;"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:168
msgid ""
"the :meth:`Process.wait() <asyncio.subprocess.Process.wait>` method is "
"asynchronous, whereas :meth:`subprocess.Popen.wait` method is implemented"
" as a blocking busy loop;"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:172
msgid "the *universal_newlines* parameter is not supported."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:174
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:176
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:181
msgid "Wait for the child process to terminate."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:183
msgid "Set and return the :attr:`returncode` attribute."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:187
msgid ""
"This method can deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` "
"and the child process generates so much output that it blocks waiting for"
" the OS pipe buffer to accept more data. Use the :meth:`communicate` "
"method when using pipes to avoid this condition."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:195
msgid "Interact with process:"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:197
msgid "send data to *stdin* (if *input* is not ``None``);"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:198
msgid "read data from *stdout* and *stderr*, until EOF is reached;"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:199
msgid "wait for process to terminate."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:201
msgid ""
"The optional *input* argument is the data (:class:`bytes` object) that "
"will be sent to the child process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:204
msgid "Return a tuple ``(stdout_data, stderr_data)``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:206
msgid ""
"If either :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception"
" is raised when writing *input* into *stdin*, the exception is ignored.  "
"This condition occurs when the process exits before all data are written "
"into *stdin*."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:211
msgid ""
"If it is desired to send data to the process' *stdin*, the process needs "
"to be created with ``stdin=PIPE``.  Similarly, to get anything other than"
" ``None`` in the result tuple, the process has to be created with "
"``stdout=PIPE`` and/or ``stderr=PIPE`` arguments."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:217
msgid ""
"Note, that the data read is buffered in memory, so do not use this method"
" if the data size is large or unlimited."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:222
msgid "Sends the signal *signal* to the child process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:226
msgid ""
"On Windows, :py:data:`SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes "
"started with a *creationflags* parameter which includes "
"``CREATE_NEW_PROCESS_GROUP``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:233
msgid "Stop the child process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:235
msgid ""
"On POSIX systems this method sends :py:data:`signal.SIGTERM` to the child"
" process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:238
msgid ""
"On Windows the Win32 API function :c:func:`TerminateProcess` is called to"
" stop the child process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:243
msgid "Kill the child."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:245
msgid ""
"On POSIX systems this method sends :py:data:`SIGKILL` to the child "
"process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:248
msgid "On Windows this method is an alias for :meth:`terminate`."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:252
msgid ""
"Standard input stream (:class:`StreamWriter`) or ``None`` if the process "
"was created with ``stdin=None``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:257
msgid ""
"Standard output stream (:class:`StreamReader`) or ``None`` if the process"
" was created with ``stdout=None``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:262
msgid ""
"Standard error stream (:class:`StreamReader`) or ``None`` if the process "
"was created with ``stderr=None``."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:267
msgid ""
"Use the :meth:`communicate` method rather than "
":attr:`process.stdin.write() <stdin>`, :attr:`await process.stdout.read()"
" <stdout>` or :attr:`await process.stderr.read <stderr>`. This avoids "
"deadlocks due to streams pausing reading or writing and blocking the "
"child process."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:276
msgid "Process identification number (PID)."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:278
msgid ""
"Note that for processes created by the :func:`create_subprocess_shell` "
"function, this attribute is the PID of the spawned shell."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:283
msgid "Return code of the process when it exits."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:285
msgid "A ``None`` value indicates that the process has not terminated yet."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:287
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal"
" ``N`` (POSIX only)."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:294
msgid "Subprocess and Threads"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:296
msgid ""
"Standard asyncio event loop supports running subprocesses from different "
"threads, but there are limitations:"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:299
msgid "An event loop must run in the main thread."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:301
msgid ""
"The child watcher must be instantiated in the main thread before "
"executing subprocesses from other threads. Call the "
":func:`get_child_watcher` function in the main thread to instantiate the "
"child watcher."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:306
msgid ""
"Note that alternative event loop implementations might not share the "
"above limitations; please refer to their documentation."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:311
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:316
msgid "Examples"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:318
msgid ""
"An example using the :class:`~asyncio.subprocess.Process` class to "
"control a subprocess and the :class:`StreamReader` class to read from its"
" standard output."
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:324
msgid "The subprocess is created by the :func:`create_subprocess_exec` function::"
msgstr ""

#: ../Doc/library/asyncio-subprocess.rst:355
msgid ""
"See also the :ref:`same example <asyncio_example_subprocess_proto>` "
"written using low-level APIs."
msgstr ""

#~ msgid "Subprocess"
#~ msgstr ""

#~ msgid "**Source code:** :source:`Lib/asyncio/subprocess.py`"
#~ msgstr ""

#~ msgid "Windows event loop"
#~ msgstr ""

#~ msgid ""
#~ "On Windows, the default event loop "
#~ "is :class:`SelectorEventLoop` which does not"
#~ " support subprocesses. :class:`ProactorEventLoop` "
#~ "should be used instead. Example to "
#~ "use it on Windows::"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`Available event loops <asyncio-event-"
#~ "loops>` and :ref:`Platform support "
#~ "<asyncio-platform-support>`."
#~ msgstr ""

#~ msgid "Create a subprocess: high-level API using Process"
#~ msgstr ""

#~ msgid ""
#~ "The *limit* parameter sets the buffer"
#~ " limit passed to the :class:`StreamReader`."
#~ " See :meth:`AbstractEventLoop.subprocess_exec` for "
#~ "other parameters."
#~ msgstr ""

#~ msgid "This function is a :ref:`coroutine <coroutine>`."
#~ msgstr ""

#~ msgid "Run the shell command *cmd*."
#~ msgstr ""

#~ msgid ""
#~ "The *limit* parameter sets the buffer"
#~ " limit passed to the :class:`StreamReader`."
#~ " See :meth:`AbstractEventLoop.subprocess_shell` for "
#~ "other parameters."
#~ msgstr ""

#~ msgid ""
#~ "It is the application's responsibility "
#~ "to ensure that all whitespace and "
#~ "metacharacters are quoted appropriately to "
#~ "avoid `shell injection "
#~ "<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
#~ "vulnerabilities. The :func:`shlex.quote` function"
#~ " can be used to properly escape "
#~ "whitespace and shell metacharacters in "
#~ "strings that are going to be used"
#~ " to construct shell commands."
#~ msgstr ""

#~ msgid ""
#~ "Use the :meth:`AbstractEventLoop.connect_read_pipe` "
#~ "and :meth:`AbstractEventLoop.connect_write_pipe` methods"
#~ " to connect pipes."
#~ msgstr ""

#~ msgid "Create a subprocess: low-level API using subprocess.Popen"
#~ msgstr ""

#~ msgid "Run subprocesses asynchronously using the :mod:`subprocess` module."
#~ msgstr ""

#~ msgid ""
#~ "Create a subprocess from one or "
#~ "more string arguments (character strings "
#~ "or bytes strings encoded to the "
#~ ":ref:`filesystem encoding <filesystem-encoding>`),"
#~ " where the first string specifies the"
#~ " program to execute, and the "
#~ "remaining strings specify the program's "
#~ "arguments. (Thus, together the string "
#~ "arguments form the ``sys.argv`` value of"
#~ " the program, assuming it is a "
#~ "Python script.) This is similar to "
#~ "the standard library :class:`subprocess.Popen` "
#~ "class called with shell=False and the"
#~ " list of strings passed as the "
#~ "first argument; however, where "
#~ ":class:`~subprocess.Popen` takes a single "
#~ "argument which is list of strings, "
#~ ":func:`subprocess_exec` takes multiple string "
#~ "arguments."
#~ msgstr ""

#~ msgid ""
#~ "The *protocol_factory* must instantiate a "
#~ "subclass of the :class:`asyncio.SubprocessProtocol`"
#~ " class."
#~ msgstr ""

#~ msgid "Other parameters:"
#~ msgstr ""

#~ msgid ""
#~ "*stdin*: Either a file-like object "
#~ "representing the pipe to be connected"
#~ " to the subprocess's standard input "
#~ "stream using "
#~ ":meth:`~AbstractEventLoop.connect_write_pipe`, or the "
#~ "constant :const:`subprocess.PIPE` (the default). "
#~ "By default a new pipe will be "
#~ "created and connected."
#~ msgstr ""

#~ msgid ""
#~ "*stdout*: Either a file-like object "
#~ "representing the pipe to be connected"
#~ " to the subprocess's standard output "
#~ "stream using :meth:`~AbstractEventLoop.connect_read_pipe`,"
#~ " or the constant :const:`subprocess.PIPE` "
#~ "(the default). By default a new "
#~ "pipe will be created and connected."
#~ msgstr ""

#~ msgid ""
#~ "*stderr*: Either a file-like object "
#~ "representing the pipe to be connected"
#~ " to the subprocess's standard error "
#~ "stream using :meth:`~AbstractEventLoop.connect_read_pipe`,"
#~ " or one of the constants "
#~ ":const:`subprocess.PIPE` (the default) or "
#~ ":const:`subprocess.STDOUT`. By default a new"
#~ " pipe will be created and connected."
#~ " When :const:`subprocess.STDOUT` is specified,"
#~ " the subprocess's standard error stream "
#~ "will be connected to the same pipe"
#~ " as the standard output stream."
#~ msgstr ""

#~ msgid ""
#~ "All other keyword arguments are passed"
#~ " to :class:`subprocess.Popen` without "
#~ "interpretation, except for *bufsize*, "
#~ "*universal_newlines* and *shell*, which should"
#~ " not be specified at all."
#~ msgstr ""

#~ msgid ""
#~ "Returns a pair of ``(transport, "
#~ "protocol)``, where *transport* is an "
#~ "instance of :class:`BaseSubprocessTransport`."
#~ msgstr ""

#~ msgid "This method is a :ref:`coroutine <coroutine>`."
#~ msgstr ""

#~ msgid ""
#~ "See the constructor of the "
#~ ":class:`subprocess.Popen` class for parameters."
#~ msgstr ""

#~ msgid ""
#~ "Create a subprocess from *cmd*, which"
#~ " is a character string or a "
#~ "bytes string encoded to the "
#~ ":ref:`filesystem encoding <filesystem-encoding>`,"
#~ " using the platform's \"shell\" syntax. "
#~ "This is similar to the standard "
#~ "library :class:`subprocess.Popen` class called "
#~ "with ``shell=True``."
#~ msgstr ""

#~ msgid ""
#~ "See :meth:`~AbstractEventLoop.subprocess_exec` for "
#~ "more details about the remaining "
#~ "arguments."
#~ msgstr ""

#~ msgid ""
#~ "The :meth:`AbstractEventLoop.connect_read_pipe` and "
#~ ":meth:`AbstractEventLoop.connect_write_pipe` methods."
#~ msgstr ""

#~ msgid ""
#~ "Special value that can be used as"
#~ " the *stdin*, *stdout* or *stderr* "
#~ "argument to :func:`create_subprocess_shell` and "
#~ ":func:`create_subprocess_exec` and indicates that"
#~ " a pipe to the standard stream "
#~ "should be opened."
#~ msgstr ""

#~ msgid ""
#~ "Special value that can be used as"
#~ " the *stderr* argument to "
#~ ":func:`create_subprocess_shell` and "
#~ ":func:`create_subprocess_exec` and indicates that"
#~ " standard error should go into the"
#~ " same handle as standard output."
#~ msgstr ""

#~ msgid ""
#~ "Special value that can be used as"
#~ " the *stdin*, *stdout* or *stderr* "
#~ "argument to :func:`create_subprocess_shell` and "
#~ ":func:`create_subprocess_exec` and indicates that"
#~ " the special file :data:`os.devnull` will"
#~ " be used."
#~ msgstr ""

#~ msgid "Process"
#~ msgstr ""

#~ msgid ""
#~ "A subprocess created by the "
#~ ":func:`create_subprocess_exec` or the "
#~ ":func:`create_subprocess_shell` function."
#~ msgstr ""

#~ msgid ""
#~ "The API of the "
#~ ":class:`~asyncio.subprocess.Process` class was "
#~ "designed to be close to the API"
#~ " of the :class:`subprocess.Popen` class, "
#~ "but there are some differences:"
#~ msgstr ""

#~ msgid "There is no explicit :meth:`~subprocess.Popen.poll` method"
#~ msgstr ""

#~ msgid ""
#~ "The :meth:`~subprocess.Popen.communicate` and "
#~ ":meth:`~subprocess.Popen.wait` methods don't take"
#~ " a *timeout* parameter: use the "
#~ ":func:`wait_for` function"
#~ msgstr ""

#~ msgid ""
#~ "The *universal_newlines* parameter is not "
#~ "supported (only bytes strings are "
#~ "supported)"
#~ msgstr ""

#~ msgid ""
#~ "The :meth:`~asyncio.subprocess.Process.wait` method "
#~ "of the :class:`~asyncio.subprocess.Process` class"
#~ " is asynchronous whereas the "
#~ ":meth:`~subprocess.Popen.wait` method of the "
#~ ":class:`~subprocess.Popen` class is implemented "
#~ "as a busy loop."
#~ msgstr ""

#~ msgid ""
#~ "This class is :ref:`not thread safe "
#~ "<asyncio-multithreading>`. See also the "
#~ ":ref:`Subprocess and threads <asyncio-"
#~ "subprocess-threads>` section."
#~ msgstr ""

#~ msgid ""
#~ "Wait for child process to terminate."
#~ "  Set and return :attr:`returncode` "
#~ "attribute."
#~ msgstr ""

#~ msgid ""
#~ "This will deadlock when using "
#~ "``stdout=PIPE`` or ``stderr=PIPE`` and the "
#~ "child process generates enough output to"
#~ " a pipe such that it blocks "
#~ "waiting for the OS pipe buffer to"
#~ " accept more data. Use the "
#~ ":meth:`communicate` method when using pipes"
#~ " to avoid that."
#~ msgstr ""

#~ msgid ""
#~ "Interact with process: Send data to "
#~ "stdin.  Read data from stdout and "
#~ "stderr, until end-of-file is "
#~ "reached.  Wait for process to terminate."
#~ " The optional *input* argument should "
#~ "be data to be sent to the "
#~ "child process, or ``None``, if no "
#~ "data should be sent to the child."
#~ "  The type of *input* must be "
#~ "bytes."
#~ msgstr ""

#~ msgid ":meth:`communicate` returns a tuple ``(stdout_data, stderr_data)``."
#~ msgstr ""

#~ msgid ""
#~ "If a :exc:`BrokenPipeError` or "
#~ ":exc:`ConnectionResetError` exception is raised "
#~ "when writing *input* into stdin, the "
#~ "exception is ignored. It occurs when "
#~ "the process exits before all data "
#~ "are written into stdin."
#~ msgstr ""

#~ msgid ""
#~ "Note that if you want to send "
#~ "data to the process's stdin, you "
#~ "need to create the Process object "
#~ "with ``stdin=PIPE``.  Similarly, to get "
#~ "anything other than ``None`` in the "
#~ "result tuple, you need to give "
#~ "``stdout=PIPE`` and/or ``stderr=PIPE`` too."
#~ msgstr ""

#~ msgid ""
#~ "The data read is buffered in "
#~ "memory, so do not use this method"
#~ " if the data size is large or"
#~ " unlimited."
#~ msgstr ""

#~ msgid ""
#~ "The method now ignores :exc:`BrokenPipeError`"
#~ " and :exc:`ConnectionResetError`."
#~ msgstr ""

#~ msgid ""
#~ "Stop the child. On Posix OSs the"
#~ " method sends :py:data:`signal.SIGTERM` to "
#~ "the child. On Windows the Win32 "
#~ "API function :c:func:`TerminateProcess` is "
#~ "called to stop the child."
#~ msgstr ""

#~ msgid ""
#~ "Kills the child. On Posix OSs the"
#~ " function sends :py:data:`SIGKILL` to the"
#~ " child.  On Windows :meth:`kill` is "
#~ "an alias for :meth:`terminate`."
#~ msgstr ""

#~ msgid ""
#~ "Standard input stream (:class:`StreamWriter`), "
#~ "``None`` if the process was created "
#~ "with ``stdin=None``."
#~ msgstr ""

#~ msgid ""
#~ "Standard output stream (:class:`StreamReader`), "
#~ "``None`` if the process was created "
#~ "with ``stdout=None``."
#~ msgstr ""

#~ msgid ""
#~ "Standard error stream (:class:`StreamReader`), "
#~ "``None`` if the process was created "
#~ "with ``stderr=None``."
#~ msgstr ""

#~ msgid ""
#~ "Use the :meth:`communicate` method rather "
#~ "than :attr:`.stdin.write <stdin>`, "
#~ ":attr:`.stdout.read <stdout>` or :attr:`.stderr.read"
#~ " <stderr>` to avoid deadlocks due to"
#~ " streams pausing reading or writing "
#~ "and blocking the child process."
#~ msgstr ""

#~ msgid "The identifier of the process."
#~ msgstr ""

#~ msgid ""
#~ "Note that for processes created by "
#~ "the :func:`create_subprocess_shell` function, this"
#~ " attribute is the process identifier "
#~ "of the spawned shell."
#~ msgstr ""

#~ msgid ""
#~ "Return code of the process when it"
#~ " exited.  A ``None`` value indicates "
#~ "that the process has not terminated "
#~ "yet."
#~ msgstr ""

#~ msgid ""
#~ "A negative value ``-N`` indicates that"
#~ " the child was terminated by signal"
#~ " ``N`` (Unix only)."
#~ msgstr ""

#~ msgid "Subprocess and threads"
#~ msgstr ""

#~ msgid ""
#~ "asyncio supports running subprocesses from "
#~ "different threads, but there are limits:"
#~ msgstr ""

#~ msgid "An event loop must run in the main thread"
#~ msgstr ""

#~ msgid ""
#~ "The child watcher must be instantiated"
#~ " in the main thread, before executing"
#~ " subprocesses from other threads. Call "
#~ "the :func:`get_child_watcher` function in the"
#~ " main thread to instantiate the child"
#~ " watcher."
#~ msgstr ""

#~ msgid "The :class:`asyncio.subprocess.Process` class is not thread safe."
#~ msgstr ""

#~ msgid "Subprocess examples"
#~ msgstr ""

#~ msgid "Subprocess using transport and protocol"
#~ msgstr ""

#~ msgid ""
#~ "Example of a subprocess protocol using"
#~ " to get the output of a "
#~ "subprocess and to wait for the "
#~ "subprocess exit. The subprocess is "
#~ "created by the "
#~ ":meth:`AbstractEventLoop.subprocess_exec` method::"
#~ msgstr ""

#~ msgid "Subprocess using streams"
#~ msgstr ""

#~ msgid ""
#~ "Example using the "
#~ ":class:`~asyncio.subprocess.Process` class to "
#~ "control the subprocess and the "
#~ ":class:`StreamReader` class to read from "
#~ "the standard output.  The subprocess is"
#~ " created by the :func:`create_subprocess_exec`"
#~ " function::"
#~ msgstr ""

