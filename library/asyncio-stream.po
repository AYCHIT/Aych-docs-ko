# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-23 06:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/asyncio-stream.rst:7
msgid "Streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:9
msgid ""
"Streams are high-level async/await-ready primitives to work with network "
"connections.  Streams allow sending and receiving data without using "
"callbacks or low-level protocols and transports."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:15
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:37
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:41
msgid "Stream Functions"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:42
msgid ""
"The following top-level asyncio functions can be used to create and work "
"with streams:"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:51
msgid ""
"Establish a network connection and return a pair of ``(reader, writer)`` "
"objects."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:54
msgid ""
"The returned *reader* and *writer* objects are instances of "
":class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:57
msgid ""
"The *loop* argument is optional and can always be determined "
"automatically when this function is awaited from a coroutine."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:60 ../Doc/library/asyncio-stream.rst:93
msgid ""
"*limit* determines the buffer size limit used by the returned "
":class:`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:64
msgid ""
"The rest of the arguments are passed directly to "
":meth:`loop.create_connection`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:69 ../Doc/library/asyncio-stream.rst:122
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:79
msgid "Start a socket server."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:81
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a ``(reader, writer)`` pair as "
"two arguments, instances of the :class:`StreamReader` and "
":class:`StreamWriter` classes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:86
msgid ""
"*client_connected_cb* can be a plain callable or a :ref:`coroutine "
"function <coroutine>`; if it is a coroutine function, it will be "
"automatically scheduled as a :class:`Task`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:90
msgid ""
"The *loop* argument is optional and can always be determined "
"automatically when this method is awaited from a coroutine."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:97
msgid ""
"The rest of the arguments are passed directly to "
":meth:`loop.create_server`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:102 ../Doc/library/asyncio-stream.rst:144
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:106
msgid "Unix Sockets"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:111
msgid ""
"Establish a Unix socket connection and return a pair of ``(reader, "
"writer)``."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:114
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:116
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:119 ../Doc/library/asyncio-stream.rst:141
msgid "Availability: Unix."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:126
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:134
msgid "Start a Unix socket server."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:136
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:138
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:148
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:155
msgid "StreamReader"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:159
msgid ""
"Represents a reader object that provides APIs to read data from the IO "
"stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:162
msgid ""
"It is not recommended to instantiate *StreamReader* objects directly; use"
" :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:168
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read "
"until EOF and return all read bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:171
msgid ""
"If EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:176
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:179
msgid ""
"If EOF is received and ``\\n`` was not found, the method returns "
"partially read data."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:182
msgid ""
"If EOF is received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:187
msgid "Read exactly *n* bytes."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:189
msgid ""
"Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be "
"read.  Use the :attr:`IncompleteReadError.partial` attribute to get the "
"partially read data."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:195
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:197
msgid ""
"On success, the data and separator will be removed from the internal "
"buffer (consumed). Returned data will include the separator at the end."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:201
msgid ""
"If the amount of data read exceeds the configured stream limit, a "
":exc:`LimitOverrunError` exception is raised, and the data is left in the"
" internal buffer and can be read again."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:205
msgid ""
"If EOF is reached before the complete separator is found, an "
":exc:`IncompleteReadError` exception is raised, and the internal buffer "
"is reset.  The :attr:`IncompleteReadError.partial` attribute may contain "
"a portion of the separator."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:214
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:219
msgid "StreamWriter"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:223
msgid ""
"Represents a writer object that provides APIs to write data to the IO "
"stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:226
msgid ""
"It is not recommended to instantiate *StreamWriter* objects directly; use"
" :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:232
msgid ""
"Return *True* if the underlying transport supports the :meth:`write_eof` "
"method, *False* otherwise."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:237
msgid ""
"Close the write end of the stream after the buffered write data is "
"flushed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:242
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:246
msgid ""
"Access optional transport information; see "
":meth:`BaseTransport.get_extra_info` for details."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:251
msgid "Write *data* to the stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:253
msgid ""
"This method is not subject to flow control.  Calls to ``write()`` should "
"be followed by :meth:`drain`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:258
msgid "Write a list (or any iterable) of bytes to the stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:260
msgid ""
"This method is not subject to flow control. Calls to ``writelines()`` "
"should be followed by :meth:`drain`."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:265
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:271
msgid ""
"This is a flow control method that interacts with the underlying IO write"
" buffer.  When the size of the buffer reaches the high watermark, "
"*drain()* blocks until the size of the buffer is drained down to the low "
"watermark and writing can be resumed.  When there is nothing to wait for,"
" the :meth:`drain` returns immediately."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:280
msgid "Close the stream."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:284
msgid "Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:291
msgid "Wait until the stream is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:293
msgid ""
"Should be called after :meth:`close` to wait until the underlying "
"connection is closed."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:300
msgid "Examples"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:305
msgid "TCP echo client using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:307
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:329
msgid ""
"The :ref:`TCP echo client protocol "
"<asyncio_example_tcp_echo_client_protocol>` example uses the low-level "
":meth:`loop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:336
msgid "TCP echo server using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:338
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:371
msgid ""
"The :ref:`TCP echo server protocol "
"<asyncio_example_tcp_echo_server_protocol>` example uses the "
":meth:`loop.create_server` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:376
msgid "Get HTTP headers"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:378
msgid ""
"Simple example querying HTTP headers of the URL passed on the command "
"line::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:416
msgid "Usage::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:420
msgid "or with HTTPS::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:428
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:430
msgid ""
"Coroutine waiting until a socket receives data using the "
":func:`open_connection` function::"
msgstr ""

#: ../Doc/library/asyncio-stream.rst:464
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio_example_create_connection>` example uses a low-level protocol "
"and the :meth:`loop.create_connection` method."
msgstr ""

#: ../Doc/library/asyncio-stream.rst:468
msgid ""
"The :ref:`watch a file descriptor for read events "
"<asyncio_example_watch_fd>` example uses the low-level "
":meth:`loop.add_reader` method to watch a file descriptor."
msgstr ""

#~ msgid ""
#~ "The arguments are all the usual "
#~ "arguments to :meth:`AbstractEventLoop.create_connection`"
#~ " except *protocol_factory*; most common are"
#~ " positional host and port, with "
#~ "various optional keyword arguments following."
#~ msgstr ""

#~ msgid ""
#~ "Additional optional keyword arguments are "
#~ "*loop* (to set the event loop "
#~ "instance to use) and *limit* (to "
#~ "set the buffer limit passed to the"
#~ " :class:`StreamReader`)."
#~ msgstr ""

#~ msgid ""
#~ "The *client_connected_cb* parameter is called"
#~ " with two parameters: *client_reader*, "
#~ "*client_writer*.  *client_reader* is a "
#~ ":class:`StreamReader` object, while *client_writer*"
#~ " is a :class:`StreamWriter` object.  The"
#~ " *client_connected_cb* parameter can either "
#~ "be a plain callback function or a"
#~ " :ref:`coroutine function <coroutine>`; if "
#~ "it is a coroutine function, it "
#~ "will be automatically converted into a"
#~ " :class:`Task`."
#~ msgstr ""

#~ msgid ""
#~ "The rest of the arguments are all"
#~ " the usual arguments to "
#~ ":meth:`~AbstractEventLoop.create_server()` except "
#~ "*protocol_factory*; most common are positional"
#~ " *host* and *port*, with various "
#~ "optional keyword arguments following."
#~ msgstr ""

#~ msgid ""
#~ "See :func:`open_connection` for information "
#~ "about return value and other details."
#~ msgstr ""

#~ msgid ""
#~ "See :func:`start_server` for information about"
#~ " return value and other details."
#~ msgstr ""

#~ msgid "Streams (coroutine based API)"
#~ msgstr ""

#~ msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
#~ msgstr ""

#~ msgid "Stream functions"
#~ msgstr ""

#~ msgid ""
#~ "The top-level functions in this "
#~ "module are meant as convenience wrappers"
#~ " only; there's really nothing special "
#~ "there, and if they don't do "
#~ "exactly what you want, feel free "
#~ "to copy their code."
#~ msgstr ""

#~ msgid ""
#~ "A wrapper for "
#~ ":meth:`~AbstractEventLoop.create_connection()` returning a"
#~ " (reader, writer) pair."
#~ msgstr ""

#~ msgid ""
#~ "The reader returned is a "
#~ ":class:`StreamReader` instance; the writer is"
#~ " a :class:`StreamWriter` instance."
#~ msgstr ""

#~ msgid ""
#~ "When specified, the *loop* argument "
#~ "determines which event loop to use, "
#~ "and the *limit* argument determines the"
#~ " buffer size limit used by the "
#~ "returned :class:`StreamReader` instance."
#~ msgstr ""

#~ msgid ""
#~ "The rest of the arguments are "
#~ "passed directly to "
#~ ":meth:`AbstractEventLoop.create_connection`."
#~ msgstr ""

#~ msgid "This function is a :ref:`coroutine <coroutine>`."
#~ msgstr ""

#~ msgid ""
#~ "Start a socket server, with a "
#~ "callback for each client connected. The"
#~ " return value is the same as "
#~ ":meth:`~AbstractEventLoop.create_server()`."
#~ msgstr ""

#~ msgid ""
#~ "The *client_connected_cb* callback is called"
#~ " whenever a new client connection is"
#~ " established.  It receives a reader/writer"
#~ " pair as two arguments, the first "
#~ "is a :class:`StreamReader` instance, and "
#~ "the second is a :class:`StreamWriter` "
#~ "instance."
#~ msgstr ""

#~ msgid ""
#~ "*client_connected_cb* accepts a plain callable"
#~ " or a :ref:`coroutine function "
#~ "<coroutine>`; if it is a coroutine "
#~ "function, it will be automatically "
#~ "converted into a :class:`Task`."
#~ msgstr ""

#~ msgid ""
#~ "When specified, the *loop* argument "
#~ "determines which event loop to use, "
#~ "and the *limit* argument determines the"
#~ " buffer size limit used by the "
#~ ":class:`StreamReader` instance passed to "
#~ "*client_connected_cb*."
#~ msgstr ""

#~ msgid ""
#~ "The rest of the arguments are "
#~ "passed directly to "
#~ ":meth:`~AbstractEventLoop.create_server()`."
#~ msgstr ""

#~ msgid ""
#~ "A wrapper for "
#~ ":meth:`~AbstractEventLoop.create_unix_connection()` returning"
#~ " a (reader, writer) pair."
#~ msgstr ""

#~ msgid ""
#~ "The rest of the arguments are "
#~ "passed directly to "
#~ ":meth:`~AbstractEventLoop.create_unix_connection()`."
#~ msgstr ""

#~ msgid "Availability: UNIX."
#~ msgstr ""

#~ msgid ""
#~ "Start a UNIX Domain Socket server, "
#~ "with a callback for each client "
#~ "connected."
#~ msgstr ""

#~ msgid ""
#~ "The rest of the arguments are "
#~ "passed directly to "
#~ ":meth:`~AbstractEventLoop.create_unix_server()`."
#~ msgstr ""

#~ msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
#~ msgstr ""

#~ msgid "Get the exception."
#~ msgstr ""

#~ msgid "Acknowledge the EOF."
#~ msgstr ""

#~ msgid ""
#~ "Feed *data* bytes in the internal "
#~ "buffer.  Any operations waiting for the"
#~ " data will be resumed."
#~ msgstr ""

#~ msgid "Set the exception."
#~ msgstr ""

#~ msgid "Set the transport."
#~ msgstr ""

#~ msgid ""
#~ "If the EOF was received and the"
#~ " internal buffer is empty, return an"
#~ " empty ``bytes`` object."
#~ msgstr ""

#~ msgid "This method is a :ref:`coroutine <coroutine>`."
#~ msgstr ""

#~ msgid ""
#~ "If EOF is received, and ``\\n`` "
#~ "was not found, the method will "
#~ "return the partial read bytes."
#~ msgstr ""

#~ msgid ""
#~ "Read exactly *n* bytes. Raise an "
#~ ":exc:`IncompleteReadError` if the end of "
#~ "the stream is reached before *n* "
#~ "can be read, the "
#~ ":attr:`IncompleteReadError.partial` attribute of the"
#~ " exception contains the partial read "
#~ "bytes."
#~ msgstr ""

#~ msgid "Read data from the stream until ``separator`` is found."
#~ msgstr ""

#~ msgid ""
#~ "Configured stream limit is used to "
#~ "check result. Limit sets the maximal "
#~ "length of data that can be "
#~ "returned, not counting the separator."
#~ msgstr ""

#~ msgid ""
#~ "If an EOF occurs and the complete"
#~ " separator is still not found, an "
#~ ":exc:`IncompleteReadError` exception will be "
#~ "raised, and the internal buffer will "
#~ "be reset.  The :attr:`IncompleteReadError.partial`"
#~ " attribute may contain the separator "
#~ "partially."
#~ msgstr ""

#~ msgid ""
#~ "If the data cannot be read because"
#~ " of over limit, a :exc:`LimitOverrunError`"
#~ " exception  will be raised, and the"
#~ " data will be left in the "
#~ "internal buffer, so it can be read"
#~ " again."
#~ msgstr ""

#~ msgid "Wraps a Transport."
#~ msgstr ""

#~ msgid ""
#~ "This exposes :meth:`write`, :meth:`writelines`, "
#~ ":meth:`can_write_eof()`, :meth:`write_eof`, "
#~ ":meth:`get_extra_info` and :meth:`close`.  It "
#~ "adds :meth:`drain` which returns an "
#~ "optional :class:`Future` on which you "
#~ "can wait for flow control.  It "
#~ "also adds a transport attribute which"
#~ " references the :class:`Transport` directly."
#~ msgstr ""

#~ msgid "Transport."
#~ msgstr ""

#~ msgid ""
#~ "Return :const:`True` if the transport "
#~ "supports :meth:`write_eof`, :const:`False` if "
#~ "not. See :meth:`WriteTransport.can_write_eof`."
#~ msgstr ""

#~ msgid "Close the transport: see :meth:`BaseTransport.close`."
#~ msgstr ""

#~ msgid "Return ``True`` if the writer is closing or is closed."
#~ msgstr ""

#~ msgid "Wait until the writer is closed."
#~ msgstr ""

#~ msgid ""
#~ "Should be called after :meth:`close`  to"
#~ " wait until the underlying connection "
#~ "(and the associated transport/protocol pair)"
#~ " is closed."
#~ msgstr ""

#~ msgid ""
#~ "Let the write buffer of the "
#~ "underlying transport a chance to be "
#~ "flushed."
#~ msgstr ""

#~ msgid "The intended use is to write::"
#~ msgstr ""

#~ msgid ""
#~ "When the size of the transport "
#~ "buffer reaches the high-water limit "
#~ "(the protocol is paused), block until"
#~ " the size of the buffer is "
#~ "drained down to the low-water "
#~ "limit and the protocol is resumed. "
#~ "When there is nothing to wait for,"
#~ " the yield-from continues immediately."
#~ msgstr ""

#~ msgid ""
#~ "Yielding from :meth:`drain` gives the "
#~ "opportunity for the loop to schedule "
#~ "the write operation and flush the "
#~ "buffer. It should especially be used "
#~ "when a possibly large amount of "
#~ "data is written to the transport, "
#~ "and the coroutine does not yield-"
#~ "from between calls to :meth:`write`."
#~ msgstr ""

#~ msgid ""
#~ "Return optional transport information: see "
#~ ":meth:`BaseTransport.get_extra_info`."
#~ msgstr ""

#~ msgid ""
#~ "Write some *data* bytes to the "
#~ "transport: see :meth:`WriteTransport.write`."
#~ msgstr ""

#~ msgid ""
#~ "Write a list (or any iterable) of"
#~ " data bytes to the transport: see "
#~ ":meth:`WriteTransport.writelines`."
#~ msgstr ""

#~ msgid ""
#~ "Close the write end of the "
#~ "transport after flushing buffered data: "
#~ "see :meth:`WriteTransport.write_eof`."
#~ msgstr ""

#~ msgid "StreamReaderProtocol"
#~ msgstr ""

#~ msgid ""
#~ "Trivial helper class to adapt between"
#~ " :class:`Protocol` and :class:`StreamReader`. "
#~ "Subclass of :class:`Protocol`."
#~ msgstr ""

#~ msgid ""
#~ "*stream_reader* is a :class:`StreamReader` "
#~ "instance, *client_connected_cb* is an optional"
#~ " function called with (stream_reader, "
#~ "stream_writer) when a connection is "
#~ "made, *loop* is the event loop "
#~ "instance to use."
#~ msgstr ""

#~ msgid ""
#~ "(This is a helper class instead of"
#~ " making :class:`StreamReader` itself a "
#~ ":class:`Protocol` subclass, because the "
#~ ":class:`StreamReader` has other potential "
#~ "uses, and to prevent the user of"
#~ " the :class:`StreamReader` from accidentally "
#~ "calling inappropriate methods of the "
#~ "protocol.)"
#~ msgstr ""

#~ msgid "IncompleteReadError"
#~ msgstr ""

#~ msgid "Incomplete read error, subclass of :exc:`EOFError`."
#~ msgstr ""

#~ msgid "Total number of expected bytes (:class:`int`)."
#~ msgstr ""

#~ msgid ""
#~ "Read bytes string before the end "
#~ "of stream was reached (:class:`bytes`)."
#~ msgstr ""

#~ msgid "LimitOverrunError"
#~ msgstr ""

#~ msgid "Reached the buffer limit while looking for a separator."
#~ msgstr ""

#~ msgid "Total number of to be consumed bytes."
#~ msgstr ""

#~ msgid "Stream examples"
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`TCP echo client protocol "
#~ "<asyncio-tcp-echo-client-protocol>` example"
#~ " uses the :meth:`AbstractEventLoop.create_connection`"
#~ " method."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`TCP echo server protocol "
#~ "<asyncio-tcp-echo-server-protocol>` example"
#~ " uses the :meth:`AbstractEventLoop.create_server` "
#~ "method."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`register an open socket to "
#~ "wait for data using a protocol "
#~ "<asyncio-register-socket>` example uses a"
#~ " low-level protocol created by the"
#~ " :meth:`AbstractEventLoop.create_connection` method."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`watch a file descriptor for"
#~ " read events <asyncio-watch-read-"
#~ "event>` example uses the low-level "
#~ ":meth:`AbstractEventLoop.add_reader` method to "
#~ "register the file descriptor of a "
#~ "socket."
#~ msgstr ""

