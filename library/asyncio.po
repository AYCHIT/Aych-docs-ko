# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-23 06:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/asyncio.rst:2
msgid ":mod:`asyncio` --- Asynchronous I/O"
msgstr ":mod:`asyncio` --- 비동기 I/O"

#: ../Doc/library/asyncio.rst:23
msgid ""
"asyncio is a library to write **concurrent** code using the "
"**async/await** syntax."
msgstr "asyncio는 **async/await** 구문을 사용하여 **동시성** 코드를 작성하는 라이브러리입니다."

#: ../Doc/library/asyncio.rst:26
msgid ""
"asyncio is used as a foundation for multiple Python asynchronous "
"frameworks that provide high-performance network and web-servers, "
"database connection libraries, distributed task queues, etc."
msgstr ""
"asyncio는 고성능 네트워크 및 웹 서버, 데이터베이스 연결 라이브러리, 분산 작업 큐 등을 제공하는 여러 파이썬 비동기 "
"프레임워크의 기반으로 사용됩니다."

#: ../Doc/library/asyncio.rst:30
msgid ""
"asyncio is often a perfect fit for IO-bound and high-level **structured**"
" network code."
msgstr "asyncio는 종종 IO 병목이면서 고수준의 **구조화된** 네트워크 코드에 가장 적합합니다."

#: ../Doc/library/asyncio.rst:33
msgid "asyncio provides a set of **high-level** APIs to:"
msgstr "asyncio는 다음과 같은 작업을 위한 **고수준** API 집합을 제공합니다:"

#: ../Doc/library/asyncio.rst:35
msgid ""
":ref:`run Python coroutines <coroutine>` concurrently and have full "
"control over their execution;"
msgstr ":ref:`파이썬 코루틴들 <coroutine>`\\을 동시에 실행하고 실행을 완전히 제어할 수 있습니다."

#: ../Doc/library/asyncio.rst:38
msgid "perform :ref:`network IO and IPC <asyncio-streams>`;"
msgstr ":ref:`네트워크 IO와 IPC <asyncio-streams>`\\를 수행합니다;"

#: ../Doc/library/asyncio.rst:40
msgid "control :ref:`subprocesses <asyncio-subprocess>`;"
msgstr ":ref:`자식 프로세스 <asyncio-subprocess>`\\를 제어합니다;"

#: ../Doc/library/asyncio.rst:42
msgid "distribute tasks via :ref:`queues <asyncio-queues>`;"
msgstr ":ref:`큐 <asyncio-queues>`\\를 통해 작업을 분산합니다;"

#: ../Doc/library/asyncio.rst:44
msgid ":ref:`synchronize <asyncio-sync>` concurrent code;"
msgstr "동시성 코드를 :ref:`동기화 <asyncio-sync>`\\합니다;"

#: ../Doc/library/asyncio.rst:46
msgid ""
"Additionally, there are **low-level** APIs for *library and framework "
"developers* to:"
msgstr "또한, *라이브러리와 프레임워크 개발자*\\가 다음과 같은 작업을 할 수 있도록 하는 **저수준** API가 있습니다:"

#: ../Doc/library/asyncio.rst:49
msgid ""
"create and manage :ref:`event loops <asyncio-event-loop>`, which provide "
"asynchronous APIs for :meth:`networking <loop.create_server>`, running "
":meth:`subprocesses <loop.subprocess_exec>`, handling :meth:`OS signals "
"<loop.add_signal_handler>`, etc;"
msgstr ""
":meth:`네트워킹 <loop.create_server>`, :meth:`자식 프로세스 <loop.subprocess_exec>` "
"실행, :meth:`OS 시그널 <loop.add_signal_handler>` 처리 등의 비동기 API를 제공하는 :ref:`이벤트 "
"루프 <asyncio-event-loop>`\\를 만들고 관리합니다."

#: ../Doc/library/asyncio.rst:54
msgid ""
"implement efficient protocols using :ref:`transports <asyncio-transports-"
"protocols>`;"
msgstr ":ref:`트랜스포트 <asyncio-transports-protocols>`\\를 사용하여 효율적인 프로토콜을 구현합니다."

#: ../Doc/library/asyncio.rst:57
msgid ""
":ref:`bridge <asyncio-futures>` callback-based libraries and code with "
"async/await syntax."
msgstr ""
"콜백 기반 라이브러리와 async/await 구문을 사용한 코드 간에 :ref:`다리를 놓습니다 <asyncio-futures>`."

#: ../Doc/library/asyncio.rst:65
msgid "Reference"
msgstr "레퍼런스"

#: ../Doc/library/asyncio.rst:66
msgid "High-level APIs"
msgstr "고수준 API"

#: ../Doc/library/asyncio.rst:77
msgid "Low-level APIs"
msgstr "저수준 API"

#: ../Doc/library/asyncio.rst:87
msgid "Guides and Tutorials"
msgstr "가이드 및 자습서"

#~ msgid ""
#~ "This module provides infrastructure for writing single-threaded concurrent "
#~ "code using coroutines, multiplexing I/O access over sockets and other "
#~ "resources, running network clients and servers, and other related "
#~ "primitives. Here is a more detailed list of the package contents:"
#~ msgstr ""
#~ "이 모듈은 코루틴, 소켓 및 기타 자원을 통한 I/O 액세스 다중화, 네트워크 클라이언트와 서버 실행, 기타 관련 프리미티브를 사용하여 "
#~ "단일 스레드 동시성 코드를 작성하는데 필요한 기반 구조를 제공합니다. 패키지 내용물에 대한 자세한 목록은 다음과 같습니다:"

#~ msgid ""
#~ "a pluggable :ref:`event loop <asyncio-event-loop>` with various system-"
#~ "specific implementations;"
#~ msgstr "다양한 시스템 특정 구현을 포함하는 교체 가능한 :ref:`이벤트 루프 <asyncio-event-loop>`;"

#~ msgid ""
#~ ":ref:`transport <asyncio-transport>` and :ref:`protocol <asyncio-protocol>` "
#~ "abstractions (similar to those in `Twisted "
#~ "<https://twistedmatrix.com/trac/>`_);"
#~ msgstr ""
#~ ":ref:`트랜스포트 <asyncio-transport>` 와 :ref:`프로토콜 <asyncio-protocol>` 추상화 "
#~ "(`Twisted <https://twistedmatrix.com/trac/>`_ 에 있는 것과 유사합니다);"

#~ msgid ""
#~ "concrete support for TCP, UDP, SSL, subprocess pipes, delayed calls, and "
#~ "others (some may be system-dependent);"
#~ msgstr ""
#~ "TCP, UDP, SSL, subprocess 파이프, 지연된 호출 및 기타에 대한 구체적인 지원 (일부는 시스템 종속적일 수 "
#~ "있습니다);"

#~ msgid ""
#~ "a :class:`Future` class that mimics the one in the :mod:`concurrent.futures`"
#~ " module, but adapted for use with the event loop;"
#~ msgstr ""
#~ ":mod:`concurrent.futures` 모듈에 있는 것을 흉내 내지만, 이벤트 루프와 함께 사용되도록 수정된 "
#~ ":class:`Future` 클래스;"

#~ msgid ""
#~ "coroutines and tasks based on ``yield from`` (:PEP:`380`), to help write "
#~ "concurrent code in a sequential fashion;"
#~ msgstr ""
#~ "동시성 코드를 순차적인 형태로 작성하는 것을 돕기 위한 ``yield from`` (:PEP:`380`) 기반의 코루틴과 태스크;"

#~ msgid "cancellation support for :class:`Future`\\s and coroutines;"
#~ msgstr ":class:`Future`\\와 코루틴을 위한 취소 지원;"

#~ msgid ""
#~ ":ref:`synchronization primitives <asyncio-sync>` for use between coroutines "
#~ "in a single thread, mimicking those in the :mod:`threading` module;"
#~ msgstr ""
#~ "하나의 스레드에서 코루틴 간에 사용하기 위해 :mod:`threading` 모듈의 것들을 흉내 내는 :ref:`동기화 프리미티브 "
#~ "<asyncio-sync>`;"

#~ msgid ""
#~ "an interface for passing work off to a threadpool, for times when you "
#~ "absolutely, positively have to use a library that makes blocking I/O calls."
#~ msgstr "블록 하는 I/O 호출을 하는 라이브러리를 사용해야만 할 때, 스레드 풀에 작업을 전달하기 위한 인터페이스."

#~ msgid ""
#~ "Asynchronous programming is more complex than classical \"sequential\" "
#~ "programming: see the :ref:`Develop with asyncio <asyncio-dev>` page which "
#~ "lists common traps and explains how to avoid them. :ref:`Enable the debug "
#~ "mode <asyncio-debug-mode>` during development to detect common issues."
#~ msgstr ""
#~ "비동기 프로그래밍은 고전적인 \"순차적\" 프로그래밍보다 더 복잡합니다: :ref:`asyncio로 개발하기 <asyncio-dev>` "
#~ "페이지를 보세요, 흔히 만나는 함정을 나열하고 이를 피하는 방법을 설명합니다. :ref:`디버그 모드를 활성화해서 <asyncio-"
#~ "debug-mode>` 개발 중 일반적인 문제를 감지하도록 하십시오."

#~ msgid "Table of contents:"
#~ msgstr "목차:"

#~ msgid ""
#~ "The :mod:`asyncio` module was designed in :PEP:`3156`. For a motivational "
#~ "primer on transports and protocols, see :PEP:`3153`."
#~ msgstr ""
#~ ":mod:`asyncio` 모듈은 :PEP:`3156`\\에서 설계되었습니다. 트랜스포트와 프로토콜에 대해 동기를 부여한 첫걸음은 "
#~ ":PEP:`3153`\\를 보세요."
