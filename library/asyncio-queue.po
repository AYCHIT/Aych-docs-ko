# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-23 06:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../Doc/library/asyncio-queue.rst:7
msgid "Queues"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:9
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed "
"to be used specifically in async/await code."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:13
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use"
" :func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:17
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:20
msgid "Queue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:24
msgid "A first in, first out (FIFO) queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:26
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  "
"If it is an integer greater than ``0``, then ``await put()`` blocks when "
"the queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:31
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue"
" is always known and can be returned by calling the :meth:`qsize` method."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:35
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:39
msgid "Number of items allowed in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:43
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:47
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:49
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then "
":meth:`full()` never returns ``True``."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:54
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until "
"an item is available."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:59
msgid ""
"Return an item if one is immediately available, else raise "
":exc:`QueueEmpty`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:64
msgid "Block until all items in the queue have been received and processed."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:66
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls "
":meth:`task_done` to indicate that the item was retrieved and all work on"
" it is complete.  When the count of unfinished tasks drops to zero, "
":meth:`join` unblocks."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:74
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot "
"is available before adding the item."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:79
msgid "Put an item into the queue without blocking."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:81
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:85
msgid "Return the number of items in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:89
msgid "Indicate that a formerly enqueued task is complete."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:91
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a "
"task, a subsequent call to :meth:`task_done` tells the queue that the "
"processing on the task is complete."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:95
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items "
"have been processed (meaning that a :meth:`task_done` call was received "
"for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:100
msgid ""
"Raises :exc:`ValueError` if called more times than there were items "
"placed in the queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:105
msgid "Priority Queue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:109
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:112
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:117
msgid "LIFO Queue"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:121
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries "
"first (last in, first out)."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:126
msgid "Exceptions"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:130
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is "
"called on an empty queue."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:136
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a"
" queue that has reached its *maxsize*."
msgstr ""

#: ../Doc/library/asyncio-queue.rst:141
msgid "Examples"
msgstr ""

#: ../Doc/library/asyncio-queue.rst:145
msgid ""
"Queues can be used to distribute workload between several concurrent "
"tasks::"
msgstr ""

#~ msgid ""
#~ "If *maxsize* is less than or equal"
#~ " to zero, the queue size is "
#~ "infinite. If it is an integer "
#~ "greater than ``0``, then ``yield from"
#~ " put()`` will block when the queue"
#~ " reaches *maxsize*, until an item is"
#~ " removed by :meth:`get`."
#~ msgstr ""

#~ msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
#~ msgstr ""

#~ msgid "Queues:"
#~ msgstr ""

#~ msgid ":class:`Queue`"
#~ msgstr ""

#~ msgid ":class:`PriorityQueue`"
#~ msgstr ""

#~ msgid ":class:`LifoQueue`"
#~ msgstr ""

#~ msgid ""
#~ "asyncio queue API was designed to "
#~ "be close to classes of the "
#~ ":mod:`queue` module (:class:`~queue.Queue`, "
#~ ":class:`~queue.PriorityQueue`, :class:`~queue.LifoQueue`), "
#~ "but it has no *timeout* parameter. "
#~ "The :func:`asyncio.wait_for` function can be"
#~ " used to cancel a task after a"
#~ " timeout."
#~ msgstr ""

#~ msgid "A queue, useful for coordinating producer and consumer coroutines."
#~ msgstr ""

#~ msgid ""
#~ "If *maxsize* is less than or equal"
#~ " to zero, the queue size is "
#~ "infinite. If it is an integer "
#~ "greater than ``0``, then ``await put()``"
#~ " will block when the queue reaches"
#~ " *maxsize*, until an item is removed"
#~ " by :meth:`get`."
#~ msgstr ""

#~ msgid ""
#~ "Unlike the standard library :mod:`queue`, "
#~ "you can reliably know this Queue's "
#~ "size with :meth:`qsize`, since your "
#~ "single-threaded asyncio application won't "
#~ "be interrupted between calling :meth:`qsize`"
#~ " and doing an operation on the "
#~ "Queue."
#~ msgstr ""

#~ msgid "New :meth:`join` and :meth:`task_done` methods."
#~ msgstr ""

#~ msgid ""
#~ "If the Queue was initialized with "
#~ "``maxsize=0`` (the default), then "
#~ ":meth:`full()` is never ``True``."
#~ msgstr ""

#~ msgid "This method is a :ref:`coroutine <coroutine>`."
#~ msgstr ""

#~ msgid "The :meth:`empty` method."
#~ msgstr ""

#~ msgid "Remove and return an item from the queue."
#~ msgstr ""

#~ msgid "Block until all items in the queue have been gotten and processed."
#~ msgstr ""

#~ msgid ""
#~ "Put an item into the queue. If "
#~ "the queue is full, wait until a"
#~ " free slot is available before adding"
#~ " item."
#~ msgstr ""

#~ msgid "The :meth:`full` method."
#~ msgstr ""

#~ msgid "Number of items in the queue."
#~ msgstr ""

#~ msgid "PriorityQueue"
#~ msgstr ""

#~ msgid ""
#~ "A subclass of :class:`Queue`; retrieves "
#~ "entries in priority order (lowest "
#~ "first)."
#~ msgstr ""

#~ msgid "Entries are typically tuples of the form: (priority number, data)."
#~ msgstr ""

#~ msgid "LifoQueue"
#~ msgstr ""

#~ msgid ""
#~ "A subclass of :class:`Queue` that "
#~ "retrieves most recently added entries "
#~ "first."
#~ msgstr ""

#~ msgid ""
#~ "Exception raised when the "
#~ ":meth:`~Queue.get_nowait` method is called on"
#~ " a :class:`Queue` object which is "
#~ "empty."
#~ msgstr ""

#~ msgid ""
#~ "Exception raised when the "
#~ ":meth:`~Queue.put_nowait` method is called on"
#~ " a :class:`Queue` object which is "
#~ "full."
#~ msgstr ""

