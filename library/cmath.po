# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-05-30 09:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../Doc/library/cmath.rst:2
msgid ":mod:`cmath` --- Mathematical functions for complex numbers"
msgstr ":mod:`cmath` --- 복소수를 위한 수학 함수"

#: ../Doc/library/cmath.rst:9
msgid ""
"This module is always available.  It provides access to mathematical "
"functions for complex numbers.  The functions in this module accept "
"integers, floating-point numbers or complex numbers as arguments. They "
"will also accept any Python object that has either a :meth:`__complex__` "
"or a :meth:`__float__` method: these methods are used to convert the "
"object to a complex or floating-point number, respectively, and the "
"function is then applied to the result of the conversion."
msgstr ""

#: ../Doc/library/cmath.rst:19
msgid ""
"On platforms with hardware and system-level support for signed zeros, "
"functions involving branch cuts are continuous on *both* sides of the "
"branch cut: the sign of the zero distinguishes one side of the branch cut"
" from the other.  On platforms that do not support signed zeros the "
"continuity is as specified below."
msgstr ""
"부호 있는 0에 대한 하드웨어와 시스템 수준 지원이 있는 플랫폼에서, 분지 절단(branch cut)을 수반하는 함수는 분지 절단의"
" *양* 면에서 연속입니다: 0의 부호는 분지 절단의 한 면을 다른 면과 구별합니다. 부호 있는 0을 지원하지 않는 플랫폼에서 "
"연속성은 아래에 지정된 것과 같습니다."

#: ../Doc/library/cmath.rst:27
msgid "Conversions to and from polar coordinates"
msgstr "극좌표 변환"

#: ../Doc/library/cmath.rst:29
msgid ""
"A Python complex number ``z`` is stored internally using *rectangular* or"
" *Cartesian* coordinates.  It is completely determined by its *real part*"
" ``z.real`` and its *imaginary part* ``z.imag``.  In other words::"
msgstr ""
"파이썬 복소수 ``z``\\는 *직교* 혹은 *데카르트* 좌표를 사용하여 내부적으로 저장됩니다. *실수부* ``z.real``\\과"
" *허수부* ``z.imag``\\에 의해 완전히 결정됩니다. 다시 말해::"

#: ../Doc/library/cmath.rst:36
msgid ""
"*Polar coordinates* give an alternative way to represent a complex "
"number.  In polar coordinates, a complex number *z* is defined by the "
"modulus *r* and the phase angle *phi*. The modulus *r* is the distance "
"from *z* to the origin, while the phase *phi* is the counterclockwise "
"angle, measured in radians, from the positive x-axis to the line segment "
"that joins the origin to *z*."
msgstr ""
"*극좌표(polar coordinates)*\\는 복소수를 나타내는 다른 방법을 제공합니다. 극좌표에서, 복소수 *z*\\는 "
"모듈러스(modulus) *r*\\과 위상 각(phase angle) *phi*\\로 정의됩니다. 모듈러스 *r*\\은 "
"*z*\\에서 원점까지의 거리이며, 위상 *phi*\\는 양의 x축에서 원점과 *z*\\를 잇는 선분으로의 라디안(radian)으로"
" 측정한 반 시계 방향 각도입니다."

#: ../Doc/library/cmath.rst:43
msgid ""
"The following functions can be used to convert from the native "
"rectangular coordinates to polar coordinates and back."
msgstr "네이티브 직교 좌표와 극좌표 간의 변환에 다음 함수를 사용할 수 있습니다."

#: ../Doc/library/cmath.rst:48
msgid ""
"Return the phase of *x* (also known as the *argument* of *x*), as a "
"float.  ``phase(x)`` is equivalent to ``math.atan2(x.imag, x.real)``.  "
"The result lies in the range [-\\ *π*, *π*], and the branch cut for this "
"operation lies along the negative real axis, continuous from above.  On "
"systems with support for signed zeros (which includes most systems in "
"current use), this means that the sign of the result is the same as the "
"sign of ``x.imag``, even when ``x.imag`` is zero::"
msgstr ""
"*x*\\의 위상(*x*\\의 *편각(argument)*\\이라고도 합니다)을 float로 반환합니다. ``phase(x)``\\는"
" ``math.atan2(x.imag, x.real)``\\과 동등합니다. 결과는 [-\\ *π*, *π*] 범위에 놓이고, 이 "
"작업의 분지 절단은 음의 실수 축에 놓이고, 위로부터 연속입니다. 부호 있는 0을 지원하는 시스템(현재 사용 중인 대부분의 시스템을"
" 포함합니다)에서, 이는 결과의 부호가 ``x.imag``\\가 0일 때도 ``x.imag``\\의 부호와 같음을 의미합니다::"

#: ../Doc/library/cmath.rst:65
msgid ""
"The modulus (absolute value) of a complex number *x* can be computed "
"using the built-in :func:`abs` function.  There is no separate "
":mod:`cmath` module function for this operation."
msgstr ""
"복소수 *x*\\의 모듈러스(절댓값)는 내장 :func:`abs` 함수를 사용하여 계산할 수 있습니다. 이 연산을 위한 별도의 "
":mod:`cmath` 모듈 함수는 없습니다."

#: ../Doc/library/cmath.rst:72
msgid ""
"Return the representation of *x* in polar coordinates.  Returns a pair "
"``(r, phi)`` where *r* is the modulus of *x* and phi is the phase of *x*."
"  ``polar(x)`` is equivalent to ``(abs(x), phase(x))``."
msgstr ""
"*x* 표현을 극좌표로 반환합니다. 쌍 ``(r, phi)``\\를 반환합니다. 여기서 *r*\\은 *x*\\의 모듈러스이고 "
"phi는 *x*\\의 위상입니다. ``polar(x)``\\는 ``(abs(x), phase(x))``\\와 동등합니다."

#: ../Doc/library/cmath.rst:80
msgid ""
"Return the complex number *x* with polar coordinates *r* and *phi*. "
"Equivalent to ``r * (math.cos(phi) + math.sin(phi)*1j)``."
msgstr ""
"극좌표 *r*\\과 *phi*\\를 가지는 복소수 *x*\\를 반환합니다. ``r * (math.cos(phi) + "
"math.sin(phi)*1j)``\\와 동등합니다."

#: ../Doc/library/cmath.rst:85
msgid "Power and logarithmic functions"
msgstr "거듭제곱과 로그 함수"

#: ../Doc/library/cmath.rst:89
msgid ""
"Return *e* raised to the power *x*, where *e* is the base of natural "
"logarithms."
msgstr "*e*\\의 *x* 거듭제곱을 반환합니다. 여기서 *e*\\는 자연로그(natural logarithms)의 밑입니다."

#: ../Doc/library/cmath.rst:95
msgid ""
"Returns the logarithm of *x* to the given *base*. If the *base* is not "
"specified, returns the natural logarithm of *x*. There is one branch cut,"
" from 0 along the negative real axis to -∞, continuous from above."
msgstr ""
"주어진 *밑(base)*\\에 대한 *x*\\의 로그를 반환합니다. *base*\\가 지정되지 않으면, *x*\\의 자연로그를 "
"반환합니다. 음의 실수 축을 따라 0에서부터 -∞ 까지 가고, 위로부터 연속인 하나의 분지 절단이 있습니다."

#: ../Doc/library/cmath.rst:102
msgid ""
"Return the base-10 logarithm of *x*. This has the same branch cut as "
":func:`log`."
msgstr "*x*\\의 밑이 10인 로그를 반환합니다. 이것은 :func:`log`\\와 같은 분지 절단을 가집니다."

#: ../Doc/library/cmath.rst:108
msgid ""
"Return the square root of *x*. This has the same branch cut as "
":func:`log`."
msgstr "*x*\\의 제곱근을 반환합니다. 이것은 :func:`log`\\와 같은 분지 절단을 가집니다."

#: ../Doc/library/cmath.rst:112
msgid "Trigonometric functions"
msgstr "삼각 함수"

#: ../Doc/library/cmath.rst:116
msgid ""
"Return the arc cosine of *x*. There are two branch cuts: One extends "
"right from 1 along the real axis to ∞, continuous from below. The other "
"extends left from -1 along the real axis to -∞, continuous from above."
msgstr ""
"*x*\\의 아크 코사인을 반환합니다. 두 개의 분지 절단이 있습니다: 하나는 실수 축을 따라 1에서 오른쪽으로 ∞까지 확장하고, "
"아래로부터 연속입니다. 다른 하나는 실수 축을 따라 -1에서 왼쪽으로 -∞까지 확장되고, 위에서부터 연속입니다."

#: ../Doc/library/cmath.rst:123
msgid "Return the arc sine of *x*. This has the same branch cuts as :func:`acos`."
msgstr "*x*\\의 아크 사인을 반환합니다. 이것은 :func:`acos`\\와 같은 분지 절단을 가집니다."

#: ../Doc/library/cmath.rst:128
msgid ""
"Return the arc tangent of *x*. There are two branch cuts: One extends "
"from ``1j`` along the imaginary axis to ``∞j``, continuous from the "
"right. The other extends from ``-1j`` along the imaginary axis to "
"``-∞j``, continuous from the left."
msgstr ""
"*x*\\의 아크 탄젠트를 반환합니다. 두 개의 분지 절단이 있습니다: 하나는 허수 축을 따라 ``1j``\\에서 "
"``∞j``\\까지 확장되며, 오른쪽으로부터 연속입니다. 다른 하나는 허수 축을 따라 ``-1j``\\에서 ``-∞j``\\까지 "
"확장되며, 왼쪽으로부터 연속입니다."

#: ../Doc/library/cmath.rst:136
msgid "Return the cosine of *x*."
msgstr "*x*\\의 코사인을 반환합니다."

#: ../Doc/library/cmath.rst:141
msgid "Return the sine of *x*."
msgstr "*x*\\의 사인을 반환합니다."

#: ../Doc/library/cmath.rst:146
msgid "Return the tangent of *x*."
msgstr "*x*\\의 탄젠트를 반환합니다."

#: ../Doc/library/cmath.rst:150
msgid "Hyperbolic functions"
msgstr "쌍곡선(hyperbolic) 함수"

#: ../Doc/library/cmath.rst:154
msgid ""
"Return the inverse hyperbolic cosine of *x*. There is one branch cut, "
"extending left from 1 along the real axis to -∞, continuous from above."
msgstr ""
"*x*\\의 역 쌍곡선 코사인을 반환합니다. 하나의 분지 절단이 있습니다, 실수 축을 따라 1에서 왼쪽으로 -∞까지 확장되며 "
"위로부터 연속입니다."

#: ../Doc/library/cmath.rst:160
msgid ""
"Return the inverse hyperbolic sine of *x*. There are two branch cuts: One"
" extends from ``1j`` along the imaginary axis to ``∞j``, continuous from "
"the right.  The other extends from ``-1j`` along the imaginary axis to "
"``-∞j``, continuous from the left."
msgstr ""
"*x*\\의 역 쌍곡선 사인을 반환합니다. 두 개의 분지 절단이 있습니다: 하나는 허수 축을 따라 ``1j``\\에서 "
"``∞j``\\까지 확장되며, 오른쪽으로부터 연속입니다. 다른 하나는 허수 축을 따라 ``-1j``\\에서 ``-∞j``\\까지 "
"확장되며, 왼쪽으로부터 연속입니다."

#: ../Doc/library/cmath.rst:168
msgid ""
"Return the inverse hyperbolic tangent of *x*. There are two branch cuts: "
"One extends from ``1`` along the real axis to ``∞``, continuous from "
"below. The other extends from ``-1`` along the real axis to ``-∞``, "
"continuous from above."
msgstr ""
"*x*\\의 역 쌍곡선 탄젠트를 반환합니다. 두 개의 분지 절단이 있습니다: 하나는 실수 축을 따라 ``1``\\에서 "
"``∞``\\까지 확장되며, 아래로부터 연속입니다. 다른 하나는 실수 축을 따라 ``-1``\\에서 ``-∞``\\까지 확장되며, "
"위로부터 연속입니다."

#: ../Doc/library/cmath.rst:176
msgid "Return the hyperbolic cosine of *x*."
msgstr "*x*\\의 쌍곡선 코사인을 반환합니다."

#: ../Doc/library/cmath.rst:181
msgid "Return the hyperbolic sine of *x*."
msgstr "*x*\\의 쌍곡선 사인을 반환합니다."

#: ../Doc/library/cmath.rst:186
msgid "Return the hyperbolic tangent of *x*."
msgstr "*x*\\의 쌍곡선 탄젠트를 반환합니다."

#: ../Doc/library/cmath.rst:190
msgid "Classification functions"
msgstr "분류 함수"

#: ../Doc/library/cmath.rst:194
msgid ""
"Return ``True`` if both the real and imaginary parts of *x* are finite, "
"and ``False`` otherwise."
msgstr "*x*\\의 실수부와 허수부가 모두 유한이면 ``True``\\를 반환하고, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../Doc/library/cmath.rst:202
msgid ""
"Return ``True`` if either the real or the imaginary part of *x* is an "
"infinity, and ``False`` otherwise."
msgstr "*x*\\의 실수부나 허수부 중 하나가 무한이면 ``True``\\를 반환하고, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../Doc/library/cmath.rst:208
msgid ""
"Return ``True`` if either the real or the imaginary part of *x* is a NaN,"
" and ``False`` otherwise."
msgstr "*x*\\의 실수부나 허수부 중 하나가 NaN이면 ``True``\\를 반환하고, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../Doc/library/cmath.rst:214
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr "*a*\\와 *b* 값이 서로 가까우면 ``True``\\를 반환하고, 그렇지 않으면 ``False``\\를 반환합니다."

#: ../Doc/library/cmath.rst:217
msgid ""
"Whether or not two values are considered close is determined according to"
" given absolute and relative tolerances."
msgstr "두 값을 가까운 것으로 간주하는지는 주어진 절대와 상대 허용 오차에 따라 결정됩니다."

#: ../Doc/library/cmath.rst:220
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed "
"difference between *a* and *b*, relative to the larger absolute value of "
"*a* or *b*. For example, to set a tolerance of 5%, pass ``rel_tol=0.05``."
"  The default tolerance is ``1e-09``, which assures that the two values "
"are the same within about 9 decimal digits.  *rel_tol* must be greater "
"than zero."
msgstr ""
"*rel_tol*\\은 상대 허용 오차입니다 -- *a*\\와 *b* 사이의 최대 허용 차이이고, *a*\\나 *b*\\의 절댓값 "
"중 더 큰 값에 상대적입니다. 예를 들어, 5%의 허용 오차를 설정하려면, ``rel_tol=0.05``\\를 전달하십시오. 기본 "
"허용 오차는 ``1e-09``\\이며, 이는 두 값이 약 9자리 십진 숫자 내에서 같음을 보장합니다. *rel_tol*\\은 0보다"
" 커야 합니다."

#: ../Doc/library/cmath.rst:226
msgid ""
"*abs_tol* is the minimum absolute tolerance -- useful for comparisons "
"near zero. *abs_tol* must be at least zero."
msgstr ""
"*abs_tol*\\은 최소 절대 허용 오차입니다 -- 0에 가까운 비교에 유용합니다. *abs_tol*\\은 최소한 0이어야 "
"합니다."

#: ../Doc/library/cmath.rst:229
msgid ""
"If no errors occur, the result will be: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"에러가 발생하지 않으면, 결과는 다음과 같습니다: ``abs(a-b) <= max(rel_tol * max(abs(a), "
"abs(b)), abs_tol)``."

#: ../Doc/library/cmath.rst:232
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered"
" close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are "
"only considered close to themselves."
msgstr ""
"IEEE 754 특수 값 ``NaN``, ``inf`` 및 ``-inf``\\는 IEEE 규칙에 따라 처리됩니다. 특히, "
"``NaN``\\은 ``NaN``\\을 포함한 다른 모는 값과 가깝다고 간주하지 않습니다. ``inf``\\와 ``-inf``\\는"
" 그들 자신하고만 가깝다고 간주합니다."

#: ../Doc/library/cmath.rst:241
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- 근사 동등을 검사하는 함수."

#: ../Doc/library/cmath.rst:245
msgid "Constants"
msgstr "상수"

#: ../Doc/library/cmath.rst:249
msgid "The mathematical constant *π*, as a float."
msgstr "수학 상수 *π*\\의 float 값."

#: ../Doc/library/cmath.rst:254
msgid "The mathematical constant *e*, as a float."
msgstr "수학 상수 *e*\\의 float 값."

#: ../Doc/library/cmath.rst:259
msgid "The mathematical constant *τ*, as a float."
msgstr "수학 상수 *τ*\\의 float 값."

#: ../Doc/library/cmath.rst:266
msgid "Floating-point positive infinity. Equivalent to ``float('inf')``."
msgstr "부동 소수점 양의 무한대. ``float('inf')``\\와 동등합니다."

#: ../Doc/library/cmath.rst:273
msgid ""
"Complex number with zero real part and positive infinity imaginary part. "
"Equivalent to ``complex(0.0, float('inf'))``."
msgstr "0 실수부와 양의 무한대 허수부를 갖는 복소수. ``complex(0.0, float('inf'))``\\와 동등합니다."

#: ../Doc/library/cmath.rst:281
msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to "
"``float('nan')``."
msgstr "부동 소수점 \"not a number\" (NaN) 값. ``float('nan')``\\과 동등합니다."

#: ../Doc/library/cmath.rst:289
msgid ""
"Complex number with zero real part and NaN imaginary part. Equivalent to "
"``complex(0.0, float('nan'))``."
msgstr "0 실수부와 NaN 허수부를 갖는 복소수. ``complex(0.0, float('nan'))``\\과 동등합니다."

#: ../Doc/library/cmath.rst:297
msgid ""
"Note that the selection of functions is similar, but not identical, to "
"that in module :mod:`math`.  The reason for having two modules is that "
"some users aren't interested in complex numbers, and perhaps don't even "
"know what they are.  They would rather have ``math.sqrt(-1)`` raise an "
"exception than return a complex number. Also note that the functions "
"defined in :mod:`cmath` always return a complex number, even if the "
"answer can be expressed as a real number (in which case the complex "
"number has an imaginary part of zero)."
msgstr ""
"함수 선택은 모듈 :mod:`math`\\에서와 유사하지만 동일하지는 않습니다. 두 개의 모듈이 있는 이유는 일부 사용자가 복소수에"
" 관심이 없고, 어쩌면 복소수가 무엇인지 모를 수도 있기 때문입니다. 그들에게는 ``math.sqrt(-1)``\\이 복소수를 "
"반환하기보다 예외를 발생시키는 것이 좋습니다. 또한, :mod:`cmath`\\에 정의된 함수는, 결과를 실수로 표현할 수 있을 "
"때도 항상 복소수를 반환합니다 (이때 복소수의 허수부는 0입니다)."

#: ../Doc/library/cmath.rst:305
msgid ""
"A note on branch cuts: They are curves along which the given function "
"fails to be continuous.  They are a necessary feature of many complex "
"functions.  It is assumed that if you need to compute with complex "
"functions, you will understand about branch cuts.  Consult almost any "
"(not too elementary) book on complex variables for enlightenment.  For "
"information of the proper choice of branch cuts for numerical purposes, a"
" good reference should be the following:"
msgstr ""
"분지 절단에 대한 참고 사항: 주어진 함수가 연속적이지 않은 점을 지나는 곡선입니다. 이것들은 많은 복소수 기능에서 필요한 "
"기능입니다. 복소수 함수로 계산해야 할 때, 분지 절단에 대해 이해가 필요하다고 가정합니다. 이해를 위해서는 복소 변수에 관한 "
"(너무 기초적이지 않은) 아무 책이나 참고하면 됩니다. 수치 계산의 목적으로 분지 절단을 적절히 선택하는 방법에 대한 정보에 "
"대해서는, 다음과 같은 좋은 참고 문헌이 있습니다:"

#: ../Doc/library/cmath.rst:315
msgid ""
"Kahan, W:  Branch cuts for complex elementary functions; or, Much ado "
"about nothing's sign bit.  In Iserles, A., and Powell, M. (eds.), The "
"state of the art in numerical analysis. Clarendon Press (1987) pp165--"
"211."
msgstr ""
"Kahan, W: Branch cuts for complex elementary functions; or, Much ado "
"about nothing's sign bit. Iserles, A., and Powell, M. (eds.), The state "
"of the art in numerical analysis. Clarendon Press (1987) pp165--211."

